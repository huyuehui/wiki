#+TITLE: Setup org-mode & magit for Emacs
#+DATE: [2013-11-21 Thu 00:00]
#+KEYWORDS: org-mode magit emacs
#+SETUPFILE: ../org-templates/level-1.org

* el-Get [fn:el-get]
-----
** Installation
Use the Master Branch. Evaluating this code after copying it into your =*scratch*= buffer by typing =C-j= or =M-x eval-print-last-exp= will retrieve the El-Get installation script. This script will then use =git= to clone El-Get and install it to the default location =~/.emacs.d/el-get/el-get=.
#+BEGIN_SRC emacs-lisp
  ;; So the idea is that you copy/paste this code into your *scratch* buffer,
  ;; hit C-j, and you have a working el-get.
  (url-retrieve
   "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el"
   (lambda (s)
     (goto-char (point-max))
     (eval-print-last-sexp)))
#+END_SRC

** Basic Setup
:PROPERTIES:
:CUSTOM_ID: BasicSetup
:END:

In =~/.emacs.d/init.el=, add the following code:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
  (el-get 'sync)
#+END_SRC

** Package Setup
The easiest way to setup a given package is to add its initialization code to a file named =init-<package>.el= with =<package>= replaced with the package name. This file needs to be placed in the directory =el-get-user-package-directory= (defaults to nil, you have to set a value for it, like for example =~/.emacs.d/el-get-init-files/)=. See [[#BasicSetup][Basic Setup]]
#+BEGIN_SRC sh
  mkdir ~/.emacs.d/el-get/el-get-init-files; cd $_
  touch init-org-mode.el
#+END_SRC
Put package org-mode related [[#OrgmodeConfig][configurations]] into =init-org-mode.el=.

** Usage
*** Adding and removing packages
- =M-x el-get-install= :: Will prompt for a package name, with completion, then install it. It will only propose packages that are not already installed. Any package that you have a recipe for is a candidate.

- =M-x el-get-remove= ::

*** Keeping up to date
- =M-x el-get-self-update= :: Update only one package, el-get itself.

- =M-x el-get-update= :: Will prompt for an installed package name, with completion, then update it. This will run the =build= commands and =init= the package again.

- =M-x el-get-update-all= :: Will update all packages that have the ~installed~ status in your status file. 

*** Viewing available recipes
- =M-x el-get-list-packages= :: Opens a buffer listing all known packages (those for which you have a recipe). The listing includes the package name, its status (one of available, installed, removed or required) and the package description. The description is a free form text and has not been provided for all recipes.

- =M-x el-get-describe= :: Prompt for a package name, with completion, then open an =*Help*= window with details about the selected package. Those include current status, website, description, installation method, full recipe, and buttons to easily install, update or remove the package.

*** Install package from ELPA
=M-x el-get-elpa-build-local-recipes↲=
Then packages from ELPA can be browsed in =M-x el-get-list-packages↲=. [[Adding and removing packages][Install the package you want!]]

* org-mode
------
** Installation
=M-x el-get-install RET org-mode RET=

** Update
=M-x el-get-update RET org-mode RET=
According to [[https://list.orgmode.org/8735pz50bw.fsf@gnu.org/][Switching to new Git repositories]], el-get reports error when updating ~org-mode~.
#+BEGIN_EXAMPLE
  # M-x el-get-update↲ org-mode↲

  warning: redirecting to https://git.savannah.gnu.org/git/emacs/org-mode.git/
  From https://code.orgmode.org/bzg/org-mode
     b96aae468..8db21e6cb  main       -> origin/main
  Your configuration specifies to merge with the ref 'refs/heads/master'
  from the remote, but no such ref was fetched.

  -------------------------------------------------------------------------------

  cd ~/.emacs.d/el-get/org-mode↲
  # Switch to the "master" branch:
  git checkout master↲

  # Rename it to "main":
  git branch -m master main↲

  # Get the latest commits and branches from the remote:
  git fetch↲

  # Remove the existing tracking connection with "origin/master":
  git branch --unset-upstream

  # Create a new tracking connection with the new "origin/main" branch:
  git branch -u origin/main

  --------------------------------------------------------------------------------

  ## As for now, the old url would be auto redirected to the new url. We
  ## can manually change the remote url in local repo.

  cd ~/.emacs.d/el-get/org-mode↲
  git remote set-url origin https://git.savannah.gnu.org/git/emacs/org-mode.git↲

  ## Verify the current
  remote url git remote -v↲

  origin	https://code.orgmode.org/bzg/org-mode.git (fetch)
  origin	https://code.orgmode.org/bzg/org-mode.git (push)
#+END_EXAMPLE
Proxy may speed up this process, see [[file:~/work/wiki/org/gentoo/gentoo_setup.org::Git][socks5 proxy]] for help.

** Setup HTML Export Configuration [fn:html_config]
-----
*** Directory Structure
- How to enable =Shell Script= support in org-babel

  By default, only emacs-lisp support is enabled. To have sh support, we can use Emacs Customization Interface. See [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html#Easy-Customization][Emacs Manual]] for more details. Or permanently enable it in =~/.emacs.d/init.el= [fn:org_language]. Shell script has more advantages over os related work. When portabilities are taken into account, emacs-lisp src blocks should be used as much as possible.
- Setup dir preference

  My Workspace: =~/work/wiki/=, it looks like:
  #+BEGIN_SRC emacs-lisp :results output :exports results
    (setq level 0)

    (defun walk-path-visitor (is-dir path)
      "Called by walk-path for each file found"
      (cond ((eq is-dir t)
             (setq path (file-name-as-directory (file-name-nondirectory (directory-file-name path))))
             (print-path path))
            (t
             (print-path (file-name-nondirectory path)))))

    (defun print-path (path)
      "Print path to standard-output"
      (princ (format "%s%s" (make-string level ? ) path))
      (terpri))

    (defun walk-path (dir action)
      "walk DIR executing ACTION with (dir file)"
      (unless (string-match ".git/" dir)
        (cond ((file-directory-p dir)
               (or (char-equal ?/ (aref dir(1- (length dir))))
                   (setq dir (file-name-as-directory dir)))
               (funcall action t dir)
               (setq level (+ level 4))
               (let ((lst (directory-files dir nil nil nil))
                     fullname 
                     file)
                 (while lst
                   (setq file (car lst))
                   (setq lst (cdr lst))
                   (cond ((member file '("." "..")))
                         (t
                          (setq fullname (concat dir file))
                          (walk-path fullname action))))
                 (setq level (- level 4))))
              (t
               (funcall action nil dir)))))

    ;; This is a dirty hack to search for ".../wiki/" dir with portable concerns.
    ;; All the org documents should be kept in ".../wiki/...". 
    (string-match "wiki" default-directory)
    (walk-path (substring default-directory 0 (match-end 0)) 'walk-path-visitor)
  #+END_SRC

  =org/org-templates/= is for storing options common to all my org documents. Options are placed into several layers. =level-N.org= "N" means dir level relative to base-directory. e.g. options in =level-0.org= are applied to org documents in =org/=.

*** Custom CSS support
There are two ways to have cutom css in addition to the default one: embedded or external. To externalize by using =<link>= tag, the custom css files should be exported accordingly in the publish site.  We can use =#+SETUPFILE: path/file= on top of each org document to make the custom css work on a per-file basis.

An example =level-1.org= looks like:
#+INCLUDE: "../org-templates/level-1.org" src org
The associate =org/css/code.css=:
#+INCLUDE: "../css/code.css" src org
A hard-coded css snippet, which can be put into =level-N.org= file, is shown below:
#+BEGIN_EXAMPLE
  ,#+HTML_HEAD: <style type="text/css">code{border:1px solid LightSkyblue;border-radius:0.5em;padding:0px 5px;background-color:LightCyan;}</style>
#+END_EXAMPLE

This will embed the snippet directly into the =<head>= section of exported html files. 
None of these two ways is a perfect solution. I prefer the external way for more elegant and less error-prone.

The newest Emacs does NOT ship with =htmlize= by default. When publishing project, we have the following warning:
#+BEGIN_EXAMPLE
  Cannot fontify source block (htmlize.el >= 1.34 required) [7 times]

  ## install htmlize using el-get
  M-x el-get-install↲ htmlize↲
#+END_EXAMPLE

** Project Configurations [fn:html_config]
:PROPERTIES:
:CUSTOM_ID: OrgmodeConfig
:END:
To publish all related files in a project, add the following to your emacs init file:
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        '(
          ("org-notes"
           :base-directory "~/work/wiki/org"
           :base-extension "org"
           :exclude "level-[0-9].org"
           :publishing-directory "~/work/wiki/public_html"
           :recursive t
           :publishing-function org-html-publish-to-html
           :auto-sitemap t
           )
          ("org-static"
           :base-directory "~/work/wiki/org/css"
           :base-extension "css"
           :publishing-directory "~/work/wiki/public_html/css"
           :publishing-function org-publish-attachment
           )
          ("org" :components ("org-notes" "org-static"))
          ))
#+END_SRC

According to [[http://orgmode.org/org.html#Code-evaluation-security][Code Evaluation Security]], to turn off the confirmation prompts when exporting org file with src blocks, set this option:
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* magit
-----
** Installation
=M-x el-get-install magit=[fn:magit_update]
** Useage
The following is a simple reference card[fn:magit]:
#+BEGIN_EXAMPLE
  M-x magit-status        Display status buffer of your git repo

  ?                       Display magit-key-mode-popup-dispatch
  g                       Refresh status buffer
  s                       Add the item at point to the staging area
  C-u s                   Prompt for a file to be staged instead
  u                       Remove the item at point from the staging area
  c c                     Committing, pop up a buffer for writing commit messages. "C-c C-c" to commit
  k                       Discard changes/Delete (untracked) file at point
#+END_EXAMPLE
The above lines are formated using ~C-u M-x align-regexp RET \(\s-+\)\w\{2,\}\(?:\s-\|\s.\|$\) RET RET n~:
- ~\(\s-+\)\w\{2,\}\(?:\s-\|\s.\|$\)~ :: regexp: Match lines. In emacs lisp, =\s-= matches whitespace; =\w= matches word-constituent charactor; =\{2,\}= matches at least 2 times; =\(?:...\)= is the shy group construct. A shy group serves like a ordinary group, but it does not get a number; =\(...\|...\)= matches one of alternatives; =\s.= matches punctuation charactor; =$= matches end of line.

- RET :: group: The regular expression group. These are the characters that will be deleted/expanded for the purposes of alignment.  The "alignment character" is always the first character immediately following this parenthesis group. /negative/ for *justify*, which can be used for right align[fn:align_regexp_justify]. The default for this attribute is 1.

- RET :: spacing: use the default spacing, which is =1=.

- n :: repeat throughout line: y or n.

* Golang

** org-babel support for Golang
Use [[https://github.com/pope/ob-go][ob-go]], which can be installed by el-get: =M-x el-get-install↲ ob-go↲=

** go-mode for emacs
=M-x el-get-install↲ go-mode↲=

* Spacemacs
Ref: [[https://www.spacemacs.org/doc/DOCUMENTATION.html][Spacemacs Documentation]]
According to it's [[https://github.com/syl20bnr/spacemacs#install][Default Installation]] guide:
#+begin_example
  # Backup your original Emacs configuration.
  mv ~/.emacs.d ~/.emacs.d.bak↲
  ...backup other init files if exist...
  
  git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d↲
  
  # Launch Emacs
  ① (ref:issue4807)
  ## If Spacemacs is launched for a fresh installation (without previous .spacemacs).
  ## Open a terminal and run:
  http_proxy=localhost:8080 https_proxy=localhost:8080 emacs↲
  
  ② (ref:dotspacemacs)
  ## Use previous .spacemacs.
  cp PATH/TO/BACKUP/.spacemacs ~/↲
  ## Lauch your Spacemacs with correct proxy settings in ".spacemacs" or command line.
#+end_example
Here [[(issue4807)]] refer to [[https://github.com/syl20bnr/spacemacs/issues/4807][Spacemacs::Issue4807]] for details. 
Here [[(dotspacemacs)]], my currently using ~.spacemacs~ file is shown as bellow.
#+begin_src emacs-lisp :exports results
  ;; ~/.spacemacs
  (with-temp-buffer
    (insert-file-contents "~/.spacemacs")
    (buffer-string))
#+end_src

#+RESULTS:
#+begin_example
;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     ;; auto-completion
     ;; better-defaults
     emacs-lisp
     git
     helm
     ;; lsp
     ;; markdown
     multiple-cursors
     org
     ;; (shell :variables
     ;;        shell-default-height 30
     ;;        shell-default-position 'bottom)
     ;; spell-checking
     ;; syntax-checking
     ;; version-control
     treemacs)


   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer (generally the packages are installed only and should still be
   ;; loaded using load/require/use-package in the user-config section below in
   ;; this file). If you need some configuration for these packages, then
   ;; consider creating a layer. You can also put the configuration in
   ;; `dotspacemacs/user-config'. To use a local version of a package, use the
   ;; `:location' property: '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages '(pinentry)

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=$HOME/.emacs.d/.cache/dumps/spacemacs-27.1.pdmp
   ;; (default (format "spacemacs-%s.pdmp" emacs-version))
   dotspacemacs-emacs-dumper-dump-file (format "spacemacs-%s.pdmp" emacs-version)

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; Set `read-process-output-max' when startup finishes.
   ;; This defines how much data is read from a foreign process.
   ;; Setting this >= 1 MB should increase performance for lsp servers
   ;; in emacs 27.
   ;; (default (* 1024 1024))
   dotspacemacs-read-process-output-max (* 1024 1024)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. Spacelpa is currently in
   ;; experimental state please use only for testing purposes.
   ;; (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'hybrid

   ;; If non-nil show the version string in the Spacemacs buffer. It will
   ;; appear as (spacemacs version)@(emacs version)
   ;; (default t)
   dotspacemacs-startup-buffer-show-version t

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `recents-by-project' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   ;; The exceptional case is `recents-by-project', where list-type must be a
   ;; pair of numbers, e.g. `(recents-by-project . (7 .  5))', where the first
   ;; number is the project limit and the second the limit on the recent files
   ;; within a project.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Show numbers before the startup list lines. (default t)
   dotspacemacs-show-startup-list-numbers t

   ;; The minimum delay in seconds between number key presses. (default 0.4)
   dotspacemacs-startup-buffer-multi-digit-delay 0.4

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; If non-nil, *scratch* buffer will be persistent. Things you write down in
   ;; *scratch* buffer will be saved and restored automatically.
   dotspacemacs-scratch-buffer-persistent nil

   ;; If non-nil, `kill-buffer' on *scratch* buffer
   ;; will bury it instead of killing.
   dotspacemacs-scratch-buffer-unkillable nil

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts. The `:size' can be specified as
   ;; a non-negative integer (pixel size), or a floating-point (point size).
   ;; Point size is recommended, because it's device independent. (default 10.0)
   dotspacemacs-default-font '("Migu 1M"
                               :size 10.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m" for terminal mode, "<M-return>" for GUI mode).
   ;; Thus M-RET should work as leader key in both GUI and terminal modes.
   ;; C-M-m also should work in terminal mode, but not in GUI mode.
   dotspacemacs-major-mode-emacs-leader-key (if window-system "<M-return>" "C-M-m")

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Show the scroll bar while scrolling. The auto hide time can be configured
   ;; by setting this variable to a number. (default t)
   dotspacemacs-scroll-bar-while-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but only visual lines are counted. For example, folded lines will not be
   ;; counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil', `origami' and `vimish'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil and `dotspacemacs-activate-smartparens-mode' is also non-nil,
   ;; `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil smartparens-mode will be enabled in programming modes.
   ;; (default t)
   dotspacemacs-activate-smartparens-mode t

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server nil

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; If nil then Spacemacs uses default `frame-title-format' to avoid
   ;; performance issues, instead of calculating the frame title by
   ;; `spacemacs/title-prepare' all the time.
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Show trailing whitespace (default t)
   dotspacemacs-show-trailing-whitespace t

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; If non-nil activate `clean-aindent-mode' which tries to correct
   ;; virtual indentation of simple modes. This can interfere with mode specific
   ;; indent handling like has been reported for `go-mode'.
   ;; If it does deactivate it here.
   ;; (default t)
   dotspacemacs-use-clean-aindent-mode t

   ;; Accept SPC as y for prompts if non-nil. (default nil)
   dotspacemacs-use-SPC-as-y nil

   ;; If non-nil shift your number row to match the entered keyboard layout
   ;; (only in insert state). Currently supported keyboard layouts are:
   ;; `qwerty-us', `qwertz-de' and `querty-ca-fr'.
   ;; New layouts can be added in `spacemacs-editing' layer.
   ;; (default nil)
   dotspacemacs-swap-number-row nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil

   ;; If nil the home buffer shows the full path of agenda items
   ;; and todos. If non-nil only the file name is shown.
   dotspacemacs-home-shorten-agenda-source nil

   ;; If non-nil then byte-compile some of Spacemacs files.
   dotspacemacs-byte-compile nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; Proxy
  (setq url-proxy-services
        '(("no_proxy" . "^\\(localhost\\|10.*\\)")
          ("http" . "localhost:8080")
          ("https" . "localhost:8080"))))

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump.")


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  ;; Show gpg sign options in Magit
  ;; ref: https://github.com/magit/magit/issues/3771
  (setq transient-default-level 5)
  ;; pinentry
  (pinentry-start))


;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
#+end_example

You can modify HOME environment variable to quickly try Spacemacs
without compromising your existing configuration.
#+begin_example
  make ~/usr/spacemacs↲
  git clone --depth 1 https://github.com/syl20bnr/spacemacs.git ~/usr/spacemacs/.emacs.d↲
  HOME=~/usr/spacemacs emacs↲  (ref:alter-home)
#+end_example
In line[[(alter-home)]], proxy settings are similar as described previously.
There are some drawbacks when running Spacemacs in alternate HOME environment.
+ Changing ~dotspacemacs-default-font~ has no effect if your are running Emacs in terminal.[fn:spacemacs_font] 
+ GPG signing might fail in Magit.

You can manually add a ~spacemacs.desktop~ file to be used by system launcher
programe.
#+begin_example
  # ~/.local/share/applications/spacemacs.desktop
  
  [Desktop Entry]
  Name=Spacemacs
  GenericName=Text Editor
  Comment=Edit text
  MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
  Exec=emacs %F
  Icon=/home/lucifer/.emacs.d/core/banners/img/spacemacs.png
  Type=Application
  Terminal=false
  Categories=Development;TextEditor;
  StartupNotify=true
  StartupWMClass=Emacs
#+end_example
Tilde(=~=) expansion will be failed in Icon path.
* Footnotes
[fn:spacemacs_font] [[https://www.spacemacs.org/doc/DOCUMENTATION.html#font][Spacemacs::Font]] 

[fn:el-get] Mostly copy&paste from [[https://github.com/dimitri/el-get][El-Get's README.md]]

[fn:html_config] [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing Org-mode files to HTML]]

[fn:org_language] [[http://orgmode.org/org.html#Languages][Languages support in Babel]]

[fn:magit_update] According to [[https://magit.vc/manual/magit/Updating-from-an-older-release.html#Updating-from-an-older-release][Updating Magit from an older release]], maybe you should first uninstall Magit and some of its dependencies and restart Emacs before installing the latest release. As of [2016-08-29 Mon 21:59], update magit from 1.2.0 to 2.8.0 requires uninstallation first.
#+BEGIN_EXAMPLE
  M-x el-get-remove↲ magit↲
  M-x el-get-remove↲ git-modes↲

  M-x el-get-install↲ magit↲
#+END_EXAMPLE

[fn:magit] See [[http://magit.github.io/master/magit.html][Magit User Manual]] for details.

[fn:align_regexp_justify] Quoted from =align-rules-list= variable description: It is possible with `regexp' and `group' to identify a character group that contains more than just whitespace characters.  By default, any non-whitespace characters in that group will also be deleted while aligning the alignment character.  However, if the `justify' attribute is set to a non-nil value, only the initial whitespace characters within that group will be deleted.  This has the effect of right-justifying the characters that remain, and can be used for outdenting or just plain old right-justification.
