#+TITLE: Setup org-mode for Emacs
#+DATE: [2013-11-21 Thu 00:00]
#+KEYWORDS: emacs org-mode
#+SETUPFILE: ../org-templates/level-1.org

* El-Get [fn:el-get]
-----
** Installation
Use the Master Branch. Evaluating this code after copying it into your =*scratch*= buffer by typing =C-j= or =M-x eval-print-last-exp= will retrieve the El-Get installation script. This script will then use =git= to clone El-Get and install it to the default location =~/.emacs.d/el-get/el-get=.
#+BEGIN_SRC emacs-lisp
  ;; So the idea is that you copy/paste this code into your *scratch* buffer,
  ;; hit C-j, and you have a working el-get.
  (url-retrieve
   "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
   (lambda (s)
     (goto-char (point-max))
     (eval-print-last-sexp)))
#+END_SRC

** Basic Setup
In =~/.emacs.d/init.el=, add the following code:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
  (el-get 'sync)
#+END_SRC

** Package Setup
The easiest way to setup a given package is to add its initialization code to a file named =init-<package>.el= with =<package>= replaced with the package name. This file needs to be placed in the directory =el-get-user-package-directory= (defaults to nil, you have to set a value for it, like for example =~/.emacs.d/el-get-init-files/)=.

** Usage
*** Adding and removing packages
- =M-x el-get-install=

  Will prompt for a package name, with completion, then install it. It will only propose packages that are not already installed. Any package that you have a recipe for is a candidate.

- =M-x el-get-remove=

*** Keeping up to date
- =M-x el-get-self-update=

  Update only one package, el-get itself.

- =M-x el-get-update=

  Will prompt for an installed package name, with completion, then update it. This will run the =build= commands and =init= the package again.

*** Viewing available recipes
- =M-x el-get-list-packages=

  Opens a buffer listing all known packages (those for which you have a recipe). The listing includes the package name, its status (one of available, installed, removed or required) and the package description. The description is a free form text and has not been provided for all recipes.

- =M-x el-get-describe=

  Prompt for a package name, with completion, then open an =*Help*= window with details about the selected package. Those include current status, website, description, installation method, full recipe, and buttons to easily install, update or remove the package.

* org-mode
------
=M-x el-get-install RET org-mode RET=

* Setup HTML Export Configuration [fn:html_config]
-----
** Directory Structure
- How to enable =Shell Script= support in org-babel

  By default, only emacs-lisp support is enabled. To have sh support, we can use Emacs Customization Interface. See [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html#Easy-Customization][Emacs Manual]] for more details. Or permanently enable it in =~/.emacs.d/init.el= [fn:org_language]. Shell script has more advantages over os related work. When portabilities are taken into account, emacs-lisp src blocks should be used as much as possible.
- Setup dir preference

  My Workspace: =~/work/wiki/=, it looks like:
  #+BEGIN_SRC emacs-lisp :results output :exports results
    (setq level 0)

    (defun walk-path-visitor (is-dir path)
      "Called by walk-path for each file found"
      (cond ((eq is-dir t)
             (setq path (file-name-as-directory (file-name-nondirectory (directory-file-name path))))
             (print-path path))
            (t
             (print-path (file-name-nondirectory path)))))

    (defun print-path (path)
      "Print path to standard-output"
      (princ (format "%s%s" (make-string level ? ) path))
      (terpri))

    (defun walk-path (dir action)
      "walk DIR executing ACTION with (dir file)"
      (unless (string-match ".git/" dir)
        (cond ((file-directory-p dir)
               (or (char-equal ?/ (aref dir(1- (length dir))))
                   (setq dir (file-name-as-directory dir)))
               (funcall action t dir)
               (setq level (+ level 4))
               (let ((lst (directory-files dir nil nil nil))
                     fullname 
                     file)
                 (while lst
                   (setq file (car lst))
                   (setq lst (cdr lst))
                   (cond ((member file '("." "..")))
                         (t
                          (setq fullname (concat dir file))
                          (walk-path fullname action))))
                 (setq level (- level 4))))
              (t
               (funcall action nil dir)))))

    ;; This is a dirty hack to search for ".../wiki/" dir with portable concerns.
    ;; All the org documents should be kept in ".../wiki/...". 
    (string-match "wiki" default-directory)
    (walk-path (substring default-directory 0 (match-end 0)) 'walk-path-visitor)
  #+END_SRC

  =org/org-templates/= is for storing options common to all my org documents. Options are placed into several layers. =level-N.org= "N" means dir level relative to base-directory. e.g. options in =level-0.org= are applied to org documents in =org/=.

** Custom CSS support
There are two ways to have cutom css in addition to the default one: embedded or external. To externalize by using =<link>= tag, the custom css files should be exported accordingly in the publish site.  We can use =#+SETUPFILE: path/file= on top of each org document to make the custom css work on a per-file basis.

An example =level-1.org= looks like:
#+INCLUDE: "../org-templates/level-1.org" src org
The associate =org/css/code.css=:
#+INCLUDE: "../css/code.css" src org
A hard-coded css snippet, which can be put into =level-N.org= file, is shown below:
#+BEGIN_EXAMPLE
  ,#+HTML_HEAD: <style type="text/css">code{border:1px solid LightSkyblue;border-radius:0.5em;padding:0px 5px;background-color:LightCyan;}</style>
#+END_EXAMPLE

This will embed the snippet directly into the =<head>= section of exported html files. 
None of these two ways is a perfect solution. I prefer the external way for more elegant and less error-prone.

** Project Configurations [fn:html_config]
To publish all related files in a project, add the following to your emacs init file:
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        '(
          ("org-notes"
           :base-directory "~/work/wiki/org"
           :base-extension "org"
           :exclude "level-[0-9].org"
           :publishing-directory "~/work/wiki/public_html"
           :recursive t
           :publishing-function org-html-publish-to-html
           :auto-sitemap t
           )
          ("org-static"
           :base-directory "~/work/wiki/org/css"
           :base-extension "css"
           :publishing-directory "~/work/wiki/public_html/css"
           :publishing-function org-publish-attachment
           )
          ("org" :components ("org-notes" "org-static"))
          ))
#+END_SRC

According to [[http://orgmode.org/org.html#Code-evaluation-security][Code Evaluation Security]], to turn off the confirmation prompts when exporting org file with src blocks, set this option:
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Footnotes

[fn:el-get] Mostly copy&paste from [[https://github.com/dimitri/el-get][El-Get's README.md]]

[fn:html_config] [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing Org-mode files to HTML]]

[fn:org_language] [[http://orgmode.org/org.html#Languages][Languages support in Babel]]
